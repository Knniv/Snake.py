Entorno (SnakeEnv)

-Representa el tablero, la serpiente y las manzanas.

-Mantiene el estado del juego y aplica las reglas:

	Movimiento de la serpiente.

	Comer manzana (aumenta longitud).

	Detectar colisiones (cuerpo o paredes).

	Fin del juego (todas las manzanas o colisión).


Algoritmo de búsqueda (A*)

-El agente usa A* para encontrar la ruta más corta hacia la manzana más cercana.

-La heurística Manhattan estima la distancia entre la cabeza y la manzana.

-Antes de moverse, simula el futuro para asegurarse de que la serpiente no se quede atrapada tras comer.

Fallback (BFS)

-Si A* no encuentra un camino seguro hacia ninguna manzana, el agente sigue la cola de la serpiente.

-Esto garantiza que siempre tenga un movimiento válido y no choque.


Política del agente

	-Combina las estrategias:

	-A* hacia manzana más cercana (segura).

	-Si no hay camino seguro, usar BFS hacia la cola.

	-Si no hay otra opción, cualquier movimiento válido que no choque.


Visualización (pygame)

-Dibuja el tablero, la serpiente y las manzanas en tiempo real.

-La cabeza se muestra en celeste, cuerpo en verde y manzanas en rojo.

-Actualiza cada paso según un FPS fijo para controlar velocidad.


Medición de tiempo

-Se mide el tiempo total que tarda el agente en recoger todas las manzanas o chocar.

-Permite comparar eficiencia de distintas ejecuciones.


Flujo de ejecución:

1.Inicializa tablero y serpiente en el centro.

2.Coloca manzanas en posiciones aleatorias.

3.Mientras el juego no haya terminado:

	-El agente decide el siguiente movimiento usando A* y la simulación de seguridad (BFS).

	-Si no hay manzana segura, sigue la cola.

	-Actualiza el tablero moviendo cabeza y cola.

	-Dibuja el tablero en pygame.

4.Cuando termina el juego, imprime:

	-Número de pasos.

	-Manzanas recogidas.

	-Tiempo total de ejecución.